package com.ygdxd.mybatis.plugins.generator;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;

/**
 * @author ygdxd_admin
 * @create 2017-08-16 下午6:46
 */
public class MyCommentGenerator implements CommentGenerator{

    private Properties properties;

    /**
     * The suppress Date.
     */
    private boolean suppressDate;

    /**
     * The suppress all comments.
     */
    private boolean suppressAllComments;

    /**
     * The addition of table remark's comments. If suppressAllComments is true, this option is
     * ignore
     */
    private boolean addRemarkComments;

    /**
     * default date format
     */
    private String dateFormat = "yyyy-MM-dd HH:mm:ss";

    public MyCommentGenerator(){
        super();
        properties = new Properties();
        suppressDate = false;
        suppressAllComments = false;
        addRemarkComments = false;
    }

    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);
        suppressDate = StringUtility.isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));
        suppressAllComments = StringUtility.isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
        addRemarkComments = StringUtility.isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
        String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
        if (StringUtility.stringHasValue(dateFormatString)){
            dateFormat = dateFormatString;
        }
    }

    /**
     * 增加实体的属性的注释
     * @param field
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments || "serialVersionUID".equals(field.getName())){
            return;
        }

        field.addJavaDocLine("/**");
        String remakes = introspectedColumn.getRemarks();
        if(addRemarkComments && StringUtility.stringHasValue(remakes)){
            field.addJavaDocLine(" * Database Column Remarks:");
            String[] remakeLines = remakes.split(System.getProperty("line.separator"));//$NON-NLS-1$
            for(String remarkLine : remakeLines){
                field.addJavaDocLine(" * " + remarkLine);
            }
        }

        field.addJavaDocLine(" *");
        field.addJavaDocLine(" * This field was generated by MyBatis Generator");

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" * This field corresponds to the database column ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());
        stringBuilder.append(".");
        stringBuilder.append(introspectedColumn.getActualColumnName());
        field.addJavaDocLine(stringBuilder.toString());
        field.addJavaDocLine(" */");
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        if (suppressAllComments){
            return;
        }
        field.addJavaDocLine("/**");
        field.addJavaDocLine(" *  This field was generated by MyBatis Generator.");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" * This field corresponds to the database table ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());
        field.addJavaDocLine(stringBuilder.toString());
        field.addJavaDocLine(" */");
        
    }


    /**
     * 增加实体类的注释
     * @param topLevelClass
     * @param introspectedTable
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments || !addRemarkComments){
            return;
        }

        topLevelClass.addJavaDocLine("/**");
        String remakes = introspectedTable.getRemarks();
        if(addRemarkComments && StringUtility.stringHasValue(remakes)){
            String[] remakeLines = remakes.split(System.getProperty("line.separator"));
            for (String remakeline : remakeLines) {
                topLevelClass.addJavaDocLine(" *  " + remakeline.trim());
            }
        }
        topLevelClass.addJavaDocLine(" * <p>该类对应于数据库表 <strong>" + introspectedTable.getFullyQualifiedTable() + "</strong>/p>");
//        List<IntrospectedColumn> columns = introspectedTable.getBaseColumns();
        List<IntrospectedColumn> columns = introspectedTable.getAllColumns();
        if(columns != null && !columns.isEmpty()){
            topLevelClass.addJavaDocLine(" *");
            topLevelClass.addJavaDocLine(" * <pre>");
            topLevelClass.addJavaDocLine(" * <table>");
            topLevelClass.addJavaDocLine(" *  <tr><td>属性名</td><td>数据类型</td><td>表字段名</td><td>表字段描述</td><td>默认值</td></tr>");
            for (IntrospectedColumn column : columns){
                String jp = column.getJavaProperty();
                String sn = column.getFullyQualifiedJavaType().getShortName();
                String acn = column.getActualColumnName();
                String remark = column.getRemarks();
                remark = remark == null || remark.equalsIgnoreCase("null") ? "" : remark;
                String dv = column.getDefaultValue();
                dv = dv == null || dv.equalsIgnoreCase("null") ? "" : dv;
                topLevelClass.addJavaDocLine(" *  <tr><td>" + jp + "</td><td>" + sn + "</td><td>" + acn
                        + "</td><td>" + remark.trim() + "</td><td>" + dv + "</td></tr>");
            }
            topLevelClass.addJavaDocLine(" * </table>");
            topLevelClass.addJavaDocLine(" * </pre>");
            topLevelClass.addJavaDocLine(" * ");
            topLevelClass.addJavaDocLine(" * @author Created by Mybatis Generator on "
                    + new SimpleDateFormat(dateFormat).format(new Date()));
        }
        topLevelClass.addJavaDocLine(" */");
    }

    /**
     * 增加类的注释？
     * @param innerClass
     * @param introspectedTable
     */
    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        addClassComment(innerClass ,introspectedTable ,true);
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean b) {
        if (suppressAllComments){
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();

        innerClass.addJavaDocLine("/** ");
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
        innerClass.addJavaDocLine(" * method : addClassComment");

        stringBuilder.append(" * This class corresponds to the database tabke ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(stringBuilder.toString());
        innerClass.addJavaDocLine(" */");

    }

    /**
     * 增加枚举的注解
     * @param innerEnum
     * @param introspectedTable
     */
    @Override
    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
        if (suppressAllComments){
            return;
        }

        StringBuilder stringBuilder = new StringBuilder();
        innerEnum.addJavaDocLine("/** ");
        innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator.");

        stringBuilder.append(" * This enum corresponds to the database table ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());
        innerEnum.addJavaDocLine(stringBuilder.toString());
        innerEnum.addJavaDocLine("*/");
    }

    /**
     * getter
     * @param method
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments){
            return;
        }

        method.addJavaDocLine("/**");
        method.addJavaDocLine(" * This method was generated by MyBatis Generator.");
        method.addJavaDocLine(" * The method is addGetterComment.");

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" * This method corresponds to the database table ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());
        stringBuilder.append(".");
        stringBuilder.append(introspectedColumn.getActualColumnName());
        method.addJavaDocLine(stringBuilder.toString());

        stringBuilder.setLength(0);
        stringBuilder.append(" * @return the value of ");
        stringBuilder.append(introspectedColumn.getActualColumnName());
        stringBuilder.append(" */");
        method.addJavaDocLine(" */");
    }

    /**
     * setter
     * @param method
     * @param introspectedTable
     * @param introspectedColumn
     */
    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
         if (suppressAllComments){
             return;
         }

         StringBuilder stringBuilder = new StringBuilder();

         method.addJavaDocLine("/**");
         method.addJavaDocLine(" * This method was generated by MyBatis Generator.");
         method.addJavaDocLine(" * The method is addSetterComment");

         stringBuilder.append(" * This method sets the value of the database column ");
         stringBuilder.append(introspectedTable.getFullyQualifiedTable());
         stringBuilder.append(".");
         stringBuilder.append(introspectedColumn.getActualColumnName());

         method.addJavaDocLine(stringBuilder.toString());
         method.addJavaDocLine(" *");

         Parameter parameter = method.getParameters().get(0);
         stringBuilder.setLength(0);
         stringBuilder.append(" * @param ");
         stringBuilder.append(parameter.getType());
         stringBuilder.append(" ");
         stringBuilder.append(parameter.getName());
         stringBuilder.append(" value of the ");
         stringBuilder.append(introspectedTable.getFullyQualifiedTable());
         stringBuilder.append(".");
         stringBuilder.append(introspectedColumn.getActualColumnName());
         method.addJavaDocLine(stringBuilder.toString());
         method.addJavaDocLine(" */");
    }

    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        if (suppressAllComments){
            return;
        }
        method.addJavaDocLine("/**");
        method.addJavaDocLine(" * This method was generated by MyBatis Generator.addGeneralMethodComment");

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" * This method corresponds to the database table ");
        stringBuilder.append(introspectedTable.getFullyQualifiedTable());

        method.addJavaDocLine(stringBuilder.toString());
        method.addJavaDocLine(" */");

    }

    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {

    }

    @Override
    public void addComment(XmlElement xmlElement) {
        if(suppressAllComments){
            return;
        }
        xmlElement.addElement(new TextElement("<!--"));
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" WARNING - ");
        stringBuilder.append(MergeConstants.NEW_ELEMENT_TAG);
        xmlElement.addElement(new TextElement(stringBuilder.toString()));
        xmlElement.addElement(new TextElement("" +
                "This element is automatically generated by MyBatis Generator, do not modify."));
        xmlElement.addElement(new TextElement("-->"));
    }

    @Override
    public void addRootComment(XmlElement xmlElement) {

    }
}
